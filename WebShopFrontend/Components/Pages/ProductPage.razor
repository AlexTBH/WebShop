@page "/products/{Id:int}"
@using WebShopFrontend.Interfaces
@using WebShopShared.Models
@using WebShopFrontend.Components.ProductComponents
@using WebShopFrontend.Components
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer

<div class="product-container">
	<LoadSingleProduct Item="_product">
		<ItemTemplate>
			<article class="product-item">
				<header class="product-header">
					<img src="@context.Url" alt="@context.Name" class="product-image" />
					<h2 class="product-name">@context.Name</h2>
				</header>

				<section class="product-description">
					<p>@context.Description</p>
					<p class="product-stock @((context.IsInStock ? "in-stock" : "out-of-stock"))">
						@((context.IsInStock ? "In stock" : "Out of stock"))
					</p>
				</section>

				<section class="product-price">
					<CurrencyExchange Amount="@context.Price"></CurrencyExchange>
				</section>

				<section class="add-to-cart-section">
					<AddToCart Product="context"></AddToCart>
				</section>
			</article>
		</ItemTemplate>
	</LoadSingleProduct>
</div>

@code {
	private ProductDto _product { get; set; } = null!;

	[Parameter]
	public int Id { get; set; }
	[Inject]
	private IProductService _productService { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		if (_productService == null)
		{
			throw new InvalidOperationException("ProductService is not available");
		}

		_product = await _productService.GetProduct(Id);
	}
}
