@page "/ConfirmedPurchase"
@using WebShopFrontend.Models
@using WebShopFrontend.Services
@using WebShopFrontend.Interfaces
@inject IOrderService _orderService
@rendermode InteractiveServer
@inject OrderStateService _orderStateService

<section class="order-confirmation">
    <h2>Order Confirmation</h2>

    @if (_orderStateService.Products == null || _orderStateService.Products.Count == 0)
    {
        <p aria-live="polite">No order data found. Please return to the cart.</p>
    }
    else
    {
        <article class="order-summary">
            <p><strong>Total Cost:</strong> @_orderStateService.TotalCost kr</p>
            <p><strong>Name:</strong> @_orderStateService.PurchaseModel.Name</p>
            <p><strong>Address:</strong> @_orderStateService.PurchaseModel.Address</p>
        </article>

        <h3>Ordered Products:</h3>
        <table class="order-table">
            <thead>
                <tr>
                    <th>Product</th>
                    <th>Quantity</th>
                    <th>Price</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in _orderStateService.Products)
                {
                    <tr>
                        <td>@product.Product.Name</td>
                        <td>@product.Quantity</td>
                        <td>@(product.Product.Price * product.Quantity) kr</td>
                    </tr>
                }
            </tbody>
        </table>

        <button @onclick="resetOrderState" class="confirm-button">OK!</button>
    }
</section>

@code {
    [Inject]
    private NavigationManager? _navManager { get; set; }

    private async Task resetOrderState()
    {
        _orderStateService.Products = new();
        _orderStateService.PurchaseModel = new PurchaseModel();
        _orderStateService.TotalCost = 0;
        _orderStateService.OrderId = await _orderService.GetOrderId();
        await _orderService.ChangeOrderStatus(_orderStateService.OrderId);
        _navManager?.NavigateTo("/");
    }
}
