@page "/cart"
@using WebShopFrontend.Models
@using WebShopFrontend.Interfaces
@using WebShopFrontend.Services
@using WebShopShared.Models
@rendermode InteractiveServer
@inject OrderStateService _orderStateService
@inject IOrderService _orderService;

@if (_products.Any())
{
    <div class="cart-container">
        <h2>Your Cart</h2>

        <div class="cart-header">
            <span>Product</span>
            <span>Price</span>
            <span>Quantity</span>
        </div>

        @foreach (var orderProduct in _products)
        {
            <div class="cart-item">
                <span>@orderProduct.Product.Name</span>
                <span>@orderProduct.Product.Price kr</span>
                <span>@orderProduct.Quantity</span>
            </div>
        }

        <div class="total-checkout">
            <div class="total-cost">
                <strong>Total Cost: @_totalCost.ToString("N2") kr</strong>
            </div>

            <EditForm Model="_purchaseModel" OnValidSubmit="HandleValidSubmit" FormName="checkoutForm" class="checkout-form">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="name">Name:</label>
                    <InputText id="name" @bind-Value="_purchaseModel.Name" />
                </div>

                <div class="form-group">
                    <label for="address">Address:</label>
                    <InputText id="address" @bind-Value="_purchaseModel.Address" />
                </div>

                <button type="submit">Submit Order</button>
            </EditForm>
        </div>

    </div>
}
else
{
    <div class="empty-cart">No products added</div>
}



@code {
    private List<OrderProductDetailsDto> _products = new();
    private PurchaseModel _purchaseModel = new();
    private double _totalCost;
    [Inject]
    private NavigationManager? _navManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _products = await _orderService.GetOrderProducts();
        CalculateTotalCost();
    }

    private void CalculateTotalCost()
    {
        if (_products != null && _products.Any())
        {
            _totalCost = _products.Sum(item => item.Product.Price * item.Quantity);
        }
        else
        {
            _totalCost = 0;
        }
    }

    private void HandleValidSubmit()
    {
        _orderStateService.Products = _products;
        _orderStateService.PurchaseModel = _purchaseModel;
        _orderStateService.TotalCost = _totalCost;

        _navManager?.NavigateTo("/ConfirmedPurchase");
    }
}
