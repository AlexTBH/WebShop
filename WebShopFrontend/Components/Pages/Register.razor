@page "/register"
@rendermode InteractiveServer
@using System.Text.Json
@using WebShopFrontend.Interfaces
@using Models

@if (!_isSuccess)
{
    <div class="register-container">
        <form @onsubmit="RegisterSubmit" class="register-form">
            <h2>Create an Account</h2>

            <label for="username">Username</label>
            <input type="text" id="username" @bind="_username" placeholder="Enter your username" required />

            <label for="email">Email</label>
            <input type="email" id="email" @bind="_email" placeholder="Enter your email" required />

            <label for="password">Password</label>
            <input type="password" id="password" @bind="_password" placeholder="Enter your password" required />

            <button type="submit" class="btn-primary">Register</button>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <p class="error-message">@_errorMessage</p>
            }
        </form>
    </div>
}
else
{
    <div class="success-message">
        <p>You are now registered and can log in!</p>
    </div>
}

@code {

    [Inject]
    private IUserService? _userService { get; set; }

    private string _username = string.Empty;
    private string _errorMessage = string.Empty;
    private string _email = string.Empty;
    private string _password = string.Empty;
    private bool _isSuccess = false;


    private bool _isRendered = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isRendered = true; 
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task RegisterSubmit()
    {
        if (!_isRendered)
        {
            _errorMessage = "The component is still rendering, please wait.";
            return; 
        }

        if (_userService == null)
        {
            throw new InvalidOperationException("UserService is not available");
        }

        RegisterDto user = new RegisterDto
            {
                Username = _username,
                Email = _email,
                Password = _password
            };

        try
        {
            var response = await _userService.RegisterUser(user);
            _isSuccess = response;

            if (!_isSuccess)
            {
                _errorMessage = "Registration failed, please check your information!";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred, please try again: {ex.Message}";
        }
    }
}
