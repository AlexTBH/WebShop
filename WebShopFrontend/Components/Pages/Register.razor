@page "/register"
@rendermode InteractiveServer
@using System.Text.Json
@using WebShopFrontend.Interfaces
@using Models

@if (!_isSuccess)
{
	<div class="container">
		<form @onsubmit="RegisterSubmit">
			<label for="username">Username</label>
			<input type="username" @bind="_username" />

			<label for="email">Email</label>
			<input type="email" @bind="_email" />

			<label for="password">Password</label>
			<input type="password" @bind="_password" />

			<button type="submit" class="btn btn-primary">Submit</button>
		</form>

		@if(!string.IsNullOrEmpty(_errorMessage))
		{
			<p>@_errorMessage</p>
		}

	</div>
}
else
{
	<p>You are now registred and can login!</p>
}


@code {

	[Inject]
	private IUserService? _userService { get; set;}

	private string _username = string.Empty;
	private string _errorMessage = string.Empty;
	private string _email = string.Empty;
	private string _password = string.Empty;
	private bool _isSuccess = false;

	public async Task RegisterSubmit()
	{
		if (_userService == null)
		{
			throw new InvalidOperationException("Userservice is not available");
		}

		RegisterDto user = new RegisterDto
		{
			Username = _username,
			Email = _email,
			Password = _password
		};

		try
		{
			var response = await _userService.RegisterUser(user);
			_isSuccess = response;

			if(!_isSuccess)
			{
				_errorMessage = "Registrering misslyckades, kontrollera din information!";
			}

		}
		catch (Exception ex)
		{
			_errorMessage = $"Något fel har inträffat, vänligen försök igen: {ex.Message}";
		}

	} 
}
